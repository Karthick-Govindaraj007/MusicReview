package org.example.musicreview;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class databaseUpdater {
    @Autowired // This means to get the bean called artistRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ArtistRepository artistRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewArtist(@RequestParam String artistName,
                                             @RequestParam Integer listenerCount,
                                             @RequestParam Integer playCount,
                                             @RequestParam String artistBio,
                                             @RequestParam Double artistRating,
                                             @RequestParam String topSong1,
                                             @RequestParam String topSong2,
                                             @RequestParam String topSong3,
                                             @RequestParam String topAlbum,
                                             @RequestParam String similarArtist1,
                                             @RequestParam String similarArtist2,
                                             @RequestParam String similarArtist3) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Artist artist = new Artist();

        artist.setName(artistName);

        artist.setListeners(listenerCount);
        artist.setPlayCount(playCount);

        artist.setBio(artistBio);

        artist.setRating(artistRating);

        artist.setTopSong1(topSong1);
        artist.setTopSong2(topSong2);
        artist.setTopSong3(topSong3);

        artist.setTopAlbum(topAlbum);

        artist.setSimilarArtist1(similarArtist1);
        artist.setSimilarArtist2(similarArtist2);
        artist.setSimilarArtist3(similarArtist3);

        artistRepository.save(artist);
        return "Saved";
    }

    @GetMapping(path = "/view-database")
    public @ResponseBody Iterable<Artist> getAllUsers() {
        // This returns a JSON or XML with the users
        return artistRepository.findAll();
    }
}
